import SubmitBtn from '@/components/button/SubmitBtn';
import Head from 'next/head';
import { IoChevronBack, IoChevronForwardOutline } from 'react-icons/io5';
import GenderBtn from '@/components/signup/GenderBtn';
import AgeBox from '@/components/signup/AgeBox';
import InterestTag from '@/components/signup/ InterestTag';
import BeerCategory from '@/components/signup/BeerCategory';
import { useForm } from 'react-hook-form';
import { useEffect, useState } from 'react';
import axios from '@/pages/api/axios';
import Link from 'next/link';
import { EditName } from '@/components/signup/EditName';
import Image from 'next/image';
import { BiErrorAlt } from 'react-icons/bi';
import Router from 'next/router';
import { EditImg } from '@/components/signup/EditImg';
import { useRecoilState } from 'recoil';
import { accessToken } from '@/atoms/login';
interface IFormValues {
  userBeerTags: Array<string>;
  gender: string;
  age: string;
  userBeerCategories: Array<string>;
  nickname: string;
  image: any;
}
export default function MyEdit() {
  const {
    register,
    handleSubmit,
    getValues,
    watch,
    reset,
    formState: { errors },
  } = useForm<IFormValues>({
    defaultValues: {
      nickname: '',
      age: '',
      gender: '',
      userBeerCategories: [],
      userBeerTags: [],
    },
    mode: 'onChange',
  });
  // console.log(watch('image'));
  const [userImge, setUserImge] = useState('');
  const [nameMessage, setNameMessage] = useState('');
  const [imagePreview, setImagePreview] = useState('');
  const image = watch('image');
  const [TOKEN, setAccessToken] = useRecoilState(accessToken);
  useEffect(() => {
    if (TOKEN) {
      axios
        .get('api/user')
        .then((res) => {
          // console.log(res.data);
          setUserImge(res.data.imageUrl);
          reset(res.data);
        })
        .catch((err) => console.log(err));
    }
  }, [TOKEN, reset]);
  const onValid = (data: any) => {
    // 기본으로 data 가져오기
    // console.log(data);
    const { nickname, gender, age, userBeerCategories, userBeerTags } =
      getValues();

    editClick(nickname, gender, age, userBeerCategories, userBeerTags);
  };
  const onImg = () => {
    const { image } = getValues();
    imgEdit(image);
  };
  const editClick = (
    nickname: string,
    gender: string,
    age: string,
    userBeerCategories: string[],
    userBeerTags: string[]
  ) => {
    const reqBody = {
      nickname: nickname,
      gender: gender,
      age: age,
      userBeerCategories: userBeerCategories,
      userBeerTags: userBeerTags,
    };

    axios
      .patch(`/api/mypage/userinfo`, reqBody)
      .then((res) => {
        // console.log(res.data);
        Router.push({
          pathname: '/mypage',
        });
      })
      .catch((err) => {
        // console.log(err);
        if (err.response.data.status === 409) {
          setNameMessage('닉네임 중복입니다!');
        }
      });
  };
  useEffect(() => {
    if (image && image.length > 0) {
      const file = image[0];
      setImagePreview(URL.createObjectURL(file));
      imgEdit(image);
    }
  }, [image]);
  const imgEdit = (image: any) => {
    const config = {
      headers: {
        'content-type': 'multipart/form-data',
      },
      withCredentials: true,
    };
    const formData = new FormData();
    formData.append('image', image[0]);
    axios
      .patch(`/api/mypage/userinfo/image`, formData, config)
      .then((res) => {
        // console.log(res.data);
      })
      .catch((err) => {
        console.log(err);
      });
  };
  return (
    <>
      <Head>
        <title>GetABeer</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/images/logo.png" />
      </Head>
      <main className="m-auto h-screen max-w-4xl">
        <Link href={'/mypage'}>
          <button className="m-4">
            <IoChevronBack className="w-6 h-6" />
          </button>
        </Link>
        <div className="my-4 text-center text-xl bg-white rounded-lg font-semibold">
          회원정보 수정
        </div>
        <form onSubmit={handleSubmit(onValid, onImg)}>
          <div className="m-auto max-w-md flex flex-col items-center my-6">
            <div className="relative">
              <div className="max-w-md absolute p-14 ">
                <EditImg register={register} />
              </div>
              {imagePreview ? (
                <Image
                  unoptimized
                  alt="프로필사진"
                  src={imagePreview}
                  width={80}
                  height={80}
                  className="h-20 w-20 rounded-full"
                />
              ) : (
                <Image
                  unoptimized
                  className="h-20 w-20 rounded-full"
                  alt="프로필사진"
                  src={userImge}
                  width={80}
                  height={80}
                />
              )}
            </div>
          </div>

          <div className="m-auto px-1 pb-20 max-w-md mb-10">
            <div className=" border divide-y divide-gray-200 rounded-xl">
              <div>
                <EditName register={register} />
                {nameMessage ? (
                  <div className="flex mx-3 mb-1 gap-0.5 text-red-600 text-xs">
                    <BiErrorAlt />
                    {nameMessage}
                  </div>
                ) : null}
              </div>
              <GenderBtn register={register} />
              <AgeBox register={register} />
              <div>
                <BeerCategory
                  register={register}
                  rules={{
                    validate: {
                      validate: (userBeerCategories) =>
                        userBeerCategories.length < 3 ||
                        '최대 2개까지 선택 가능합니다!',
                    },
                  }}
                />
                {errors.userBeerCategories && (
                  <p className="flex text-xs mx-3 mb-1 gap-0.5 text-red-500">
                    <BiErrorAlt /> {errors.userBeerCategories.message}
                  </p>
                )}
              </div>
              <div>
                <InterestTag
                  register={register}
                  rules={{
                    validate: {
                      validate: (userBeerTags) =>
                        userBeerTags.length < 5 ||
                        '최대 4개까지 선택 가능합니다!',
                    },
                  }}
                />
                {errors.userBeerTags && (
                  <p className="flex text-xs  mx-3 mb-1 gap-0.5 text-red-500">
                    <BiErrorAlt /> {errors.userBeerTags.message}
                  </p>
                )}
              </div>
              <Link
                href={'/pwedit'}
                className="flex w-full px-3 py-4 justify-between"
              >
                <div className="text-sm">비밀번호 변경</div>
                <IoChevronForwardOutline className="w-5 h-5 " />
              </Link>
              <SubmitBtn onClick={undefined}>등록하기</SubmitBtn>
            </div>
          </div>
        </form>
      </main>
    </>
  );
}
